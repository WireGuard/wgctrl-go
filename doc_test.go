package wgctrl_test

// This file contains documentation examples

import (
	"fmt"
	"log"
	"net"
	"os"
	"time"

	"golang.zx2c4.com/wireguard/wgctrl"
	"golang.zx2c4.com/wireguard/wgctrl/wgtypes"
)

func ExampleClient() {
	client, err := wgctrl.New()
	if err != nil {
		log.Fatalf("failed to open client: %v", err)
	}
	defer client.Close()

	pri, err := wgtypes.GeneratePrivateKey()
	if err != nil {
		log.Fatalf("failed to generate private key: %v", err)
	}

	pub, err := wgtypes.ParseKey("C9VaGN9qYYWPi4IKnbM9uv75E6iL9pBqY+i+XjUc13o=") // Should be generated by the remote peer
	if err != nil {
		log.Fatalf("failed to parse public key: %v", err)
	}

	psk, err := wgtypes.GenerateKey()
	if err != nil {
		log.Fatalf("failed to generate pre-shared key: %v", err)
	}

	port := 51800
	ka := 20 * time.Second

	conf := wgtypes.Config{
		PrivateKey:   &pri,
		ListenPort:   &port,
		ReplacePeers: true,
		Peers: []wgtypes.PeerConfig{{
			PublicKey:    pub,
			Remove:       false,
			UpdateOnly:   false,
			PresharedKey: &psk,
			Endpoint: &net.UDPAddr{
				IP:   net.ParseIP("192.168.22.44"),
				Port: 51800,
			},
			PersistentKeepaliveInterval: &ka,
			ReplaceAllowedIPs:           true,
			AllowedIPs: []net.IPNet{{
				IP:   net.ParseIP("0.0.0.0"),
				Mask: net.ParseIP("0.0.0.0").DefaultMask(),
			}},
		}},
	}

	if err := client.ConfigureDevice("wg0", conf); err != nil {
		if os.IsNotExist(err) {
			fmt.Println(err)
		} else {
			log.Fatalf("Unknown config error: %v", err)
		}
	}
}
